title: Autenticação JWT com Angular e Django
---
author: Humberto Rocha
---
body:

Quase todo sistema que opera na internet e armazena dados de usuário hoje em dia depende de uma camada de autenticação. E com o crescimento do modelo de API`s e separação do **frontend** do **backend** a implementação desta camada cresceu em complexidade.

Esta postagem tem como foco mostrar o caminho das pedras em uma stack de frontend **Angular 5** e backend **Django 2** utilizando o modelo de separação discutido na postagem ["Separando o Frontend do Backend com Angular e Django"](/blog/separando-o-frontend-do-backend-com-angular-e-django/) .

## Autenticação

Existem diversas formas de se autenticar em um sistema. A mais famosa e adotada pela internet como padrão é o modelo de usuário e senha, onde apresentamos nosso identificador (id, nome de usuário, email ou semelhante) e um segredo compartilhado com o serviço que queremos acessar, que após sua validação, nos é devolvido um **token** que funciona como um bilhete de acesso aos nossos recursos pessoais naquele serviço.

Quando implementamos sistemas monolíticos onde o **backend** e o **frontend** estão juntos esta manutenção deste **token** acontece de forma automática pela maioria das bibliotecas de autenticação disponíveis por aí. No máximo decidimos coisas como tempo de validade da sessão ou onde o **token** será armazenado trocando uma variável de configuração ou outra.

Porém, ao separarmos o **backend** do **frontend** esta gestão fica um pouco mais por nossa conta as decisões sobre o que fazer e usar para isso deve ser tomadas por nós durante a implementação. E existem enumeras formas de se fazer esta gestão  de acesso, uma delas é simplesmente utilizar o **token** padrão devolvido pelo sistema, mas neste caso como eles estão separados perdemos a possibilidade de atualizar a validade deste **token** nos obrigando a colocar novamente a senha para obter um novo acesso.

Para nos auxiliar com estes problemas utilizaremos o **JWT**.

## JWT

**JWT** ou **JSON Web Token** nada mais é que um objeto **JSON** definido na [RFC 7519](https://tools.ietf.org/html/rfc7519) para realizar transferência informação de permissões de acesso entre duas pontas. Ele é codificado e assinado e possuí o seguinte formato:

```
header.payload.signature
```

No **header** (cabeçalho) ficam os dados do **token**, que informam seu tipo e o algoritmo utilizado em sua assinatura:

```json
{
  "alg": "HS256",
  "typ": "JWT"
}
```

No **payload** (carga) ficam os dados do usuário e alguns metadados como a expiração do **token**:

```json
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
```

Finalmente na **signature** (assinatura) os dados de **header** e **payload** codificados em **base 64** e unidos por `.` para serem assinados usando o algoritmo definido no **header**:

```
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret
)
```

Com a assinatura é possível verificar se o **token** não foi alterado no caminho, garantindo sua integridade. Com ela também é possível confirmar a autenticidade de sua fonte.

Estes três blocos unidos por `.` cada um codificado em **base 64** compõem o **JWT Token**:

```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.PcmVIPbcZl9j7qFzXRAeSyhtuBnHQNMuLHsaG5l804A
```

Após confirmar os dados de usuário e receber o **JWT** ele deve ser armazenado, normalmente em `localstorage` para ser utilizado nas requisições autenticadas usando o esquema `Bearer`:

```
Authorization: Bearer <token>
```

Este é um mecanismo de autenticação que não guarda estado e por não dependerem de **token de sessão**, não há necessidade de se preocupar com **CORS**.

Agora, com todo este conhecimento é hora da implementação!!!

TODO: gif boladão

Para isso, utilizaremos como base a aplicação desenvolvida na postagem anterior ["Separando o Frontend do Backend com Angular e Django"](/blog/separando-o-frontend-do-backend-com-angular-e-django/).

## Backend

O nosso backend é o responsável pelo lado do servidor.  É quem detém o recurso a ser acessado e quem autentica o cliente.

Para iniciar nosso backend criaremos um projeto django:

```
$ pip install django
$ django-admin startproject backend
```

## Frontend

## Conclusão
---
pub_date: 2018-04-14
---
summary: Implemente um modelo de autenticação JWT com frontend em Angular 5 e um backend de api em Django 2
---
twitter_handle: humrochagf
