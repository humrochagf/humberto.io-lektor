title: Separando o Frontend do Backend com Angular e Django
---
author: Humberto Rocha
---
body:

Dentro do escopo do desenvolvimento web as coisas vem evoluindo muito rápido e crescendo em complexidade em um ritmo intenso. Aquele modelo antigo de criação de sites onde tinamos o webmaster que dominava o html e logava no servidor para atualiza uma página é algo cada vez mais raro de se ver. Até para criar sites estáticos estamos utilizando ferramentas para agilizar nosso trabalho.

Em 2017 tivemos um crescimento expressivo dos frameworks javascript e uma grande evolução do frontend como um todo. E estas novas tecnologias possuem ferramentas e fluxos de desenvolvimento próprios, o que vem tornando mais oneroso para um sistema só entregar o backend e o frontend.

Ao mesmo tempo vem se popularizando e ficando mais interessante o uso de API`s e a separação do frontend do backend em diferentes projetos, que trás a proposta de dar  mais autonomia as times de desenvolvimento além de tornar a aplicação mais escalável.

Contudo, ao deparar com esta realidade muita gente (eu incluso em minha primeira tentativa de implementação) fica perdida em como botar em prática esta forma de se implementar sistemas web. 

Nesta postagem veremos um exemplo simplificado de como iniciar um projeto a estes moldes. Criaremos uma aplicação de lista de compras onde poderemos adicionar itens a nossa lista de compras, visualizar a lista, marcar como comprado e excluir itens da lista.

## Separando as Responsabilidades

Para começar vamos falar um pouco sobre esta separação de responsabilidades dentro do nosso projeto. Existem duas grandes responsabilidades dentro de uma aplicação web interativa. Uma é a gestão e a outra é a visualização dos dados como detalharemos abaixo.

## Backend 

Em uma arquitetura web de cliente e servidor nos referimos ao backend para designar a camada de acesso aos dados que é processada totalmente pelo servidor responsável pelo serviço. É dele a responsabilidade de acessar, processar, armazenar e controlar o acesso os dados requisitados pelo cliente. Seu modelo de implementação mais famoso e encontrado na internet são as API`s REST.

## Frontend

No modelo citado acima, o frontend é responsável pela camada de apresentação dos dados e seu processamento acontece em sua maioria no cliente, mas em alguns casos parte deste processamento pode ser feito pelo servidor.

## Implementação

Definidas as responsabilidades vamos implementar nossa aplicação, partindo do backend:

Começamos com a instalação do django seguido da criação do projeto:

```shell
$ pip install django
$ django-admin startproject backend
$ cd backend
$ python manage.py migrate
$ python manage.py runserver
```

Ao iniciar o navegador em [localhost:8000](http://localhost:8000) veremos a nova tela de sucesso de criação de aplicação do Django 2 mostrando que a inicialização da sua nova aplicação foi um sucesso (muito bonita a nova tela né?!).

![novo projeto](django-startproject.gif)



---
pub_date: 2018-01-30
---
summary: Descubra como separar suas stacks para ganhar independência entre o frontend e o backend
---
twitter_handle: humrochagf
